using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using UnityEngine.UI;
using Graph;
using System.IO;

public class ColorLookUpTableManager : MonoBehaviour
{
    public GameObject regionUI = null;
    public GameObject cytologicUI = null;

    public GameObject colormapUI = null;

    public GameObject colorMapLegendUI = null;

    private Dropdown colormapDropdown;


    public GameObject regionModel = null;
    public GameObject cytologicModel = null;

    public AtlasRegionsAndFunctionsManager atlasManager = null;

    public Gradient viridis;
    public Gradient plasma;
    public Gradient inferno;
    public Gradient magma;
    public Gradient cividis;

    private GradientColorKey[] colorKey;
    private GradientAlphaKey[] alphaKey;

    public Color missingDataColor;

    //public Renderer testCubeRenderer;

    public enum ColorMap {viridis, plasma, inferno, magma, cividis};
    public ColorMap currentColorMap = ColorMap.viridis;
    public GameObject[] brainRegions;

    // normalised gradient values for each region for each map
    // -1 means NaN or missing data
    /*FA*/List<float> mapValues1 = new List<float> {1f,0.900990099009901f,0.137824474660074f,0.871829105473965f,1f,0.0784313725490196f,0.1f,0.162790697674419f,0.113207547169811f,0.0659340659340659f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1f,1f,0.5925f,0.943089430894309f,0.43802155291517f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1f,1f,0f,1f,1f,1f,0.621212121212121f,0.111111111111111f,0.8f,0.627586206896552f};
    /*FB*/List<float> mapValues2 = new List<float> {0.797452229299363f,0.618811881188119f,0.19035846724351f,0.823765020026702f,0.747347311327792f,0.235294117647059f,0.45f,0.162790697674419f,0.264150943396226f,0.0805860805860806f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.941666666666667f,0.990740740740741f,0.765f,1f,0.805540204476375f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.464285714285714f,0.549019607843137f,0.113924050632911f,0.5f,0.265075376884422f,0.84f,0.318181818181818f,0.103703703703704f,0.896f,0.627586206896552f};
    /*FC*/List<float> mapValues3 = new List<float> {0.63312101910828f,0.668316831683168f,0.205191594561187f,0.307076101468625f,0.401386682581336f,0.392156862745098f,1f,0.0697674418604651f,0.377358490566038f,0.0805860805860806f,0.181818181818182f,0.434782608695652f,0.285714285714286f,0.21875f,0.0127877237851662f,0.608333333333333f,0.537037037037037f,0.27f,0.59349593495935f,0.510914617297596f,0.184210526315789f,0.3f,0.0778443113772455f,0.133333333333333f,0.214285714285714f,0.392857142857143f,0.470588235294118f,0.367088607594937f,0.5f,0.168610911701364f,0.56f,0.393939393939394f,0.0518518518518519f,0f,0.627586206896552f};
    /*FCBm*/List<float> mapValues4 = new List<float> {0.602547770700637f,0.618811881188119f,0.234239802224969f,0.57543391188251f,0.511638479563985f,0.196078431372549f,0.45f,0.0697674418604651f,0.339622641509434f,0.0805860805860806f,0.454545454545455f,0.478260869565217f,0.285714285714286f,0.3125f,0.0664961636828645f,0.608333333333333f,0.62962962962963f,0.295f,0.59349593495935f,0.875656258634982f,0.131578947368421f,0.2f,0.11377245508982f,0.16f,0.118775510204082f,0.392857142857143f,0.411764705882353f,0.405063291139241f,0.4f,0.152907394113424f,0.52f,0.393939393939394f,0.0555555555555556f,0.56f,0.506896551724138f};
    /*FD*/List<float> mapValues5 = new List<float> {0.445859872611465f,0.435643564356436f,0.273794808405439f,0.499332443257677f,0.316900852195434f,0.196078431372549f,0.25f,0.255813953488372f,0.188679245283019f,0.175824175824176f,0.454545454545455f,0.565217391304348f,0.428571428571429f,0.34375f,0.0588235294117647f,0.425f,0.527777777777778f,0.165f,0.430894308943089f,0.346504559270517f,0.197368421052632f,0.314285714285714f,0.173652694610778f,0.253333333333333f,0.0857142857142857f,0.375f,0.313725490196078f,0.29746835443038f,0.428571428571429f,0.179827709978464f,0.336f,0.189393939393939f,0.185185185185185f,0.52f,0.429310344827586f};
    /*FDdelta*/List<float> mapValues6 = new List<float> {0.445859872611465f,0.46039603960396f,0.226823238566131f,0.447263017356475f,0.117643122317691f,0.352941176470588f,0.45f,0.255813953488372f,0.415094339622642f,0.175824175824176f,0.454545454545455f,0.652173913043478f,0.357142857142857f,0.375f,0.0664961636828645f,0.458333333333333f,0.444444444444445f,0.0875f,0.439024390243902f,0.297803260569218f,0.236842105263158f,0.328571428571429f,0.149700598802395f,0.266666666666667f,0.0502040816326531f,0.285714285714286f,0.215686274509804f,0.177215189873418f,0.285714285714286f,0.0721464465183058f,0.288f,0.28030303030303f,0.237037037037037f,0.424f,0.351724137931035f};
    /*FDT*/List<float> mapValues7 = new List<float> {0.373248407643312f,0.534653465346535f,0.254017305315204f,0.415220293724967f,0.354192081866931f,0.0784313725490196f,0.35f,0.209302325581395f,0.226415094339623f,0.175824175824176f,0.181818181818182f,0.391304347826087f,0.357142857142857f,0.1875f,0.010230179028133f,0.425f,0.675925925925926f,0.175f,0.520325203252033f,0.848024316109422f,0.197368421052632f,0.285714285714286f,0.137724550898204f,0.226666666666667f,0.0502040816326531f,0.25f,0.411764705882353f,0.329113924050633f,0.342857142857143f,0.134960516870065f,0.312f,0.212121212121212f,0.225925925925926f,0.36f,0.23448275862069f};
    /*FE*/List<float> mapValues8 = new List<float> {0.453503184713376f,0.247524752475248f,0.362175525339926f,0.335113484646195f,0.101385804934133f,0.313725490196078f,0.35f,0.0697674418604651f,0.264150943396226f,0.10989010989011f,0.318181818181818f,0.652173913043478f,0.535714285714286f,0.21875f,0.0856777493606138f,0.325f,0.287037037037037f,0.275f,0.268292682926829f,0.271483835313623f,0.302631578947368f,0.257142857142857f,0.161676646706587f,0.333333333333333f,0.122448979591837f,0.339285714285714f,0.274509803921569f,0.721518987341772f,0.357142857142857f,0.0699030868628859f,0.4f,0.113636363636364f,0.259259259259259f,0.36f,0.144827586206897f};
    /*FF*/List<float> mapValues9 = new List<float> {0.636942675159236f,0.54950495049505f,0.218788627935723f,0.563417890520694f,0.0888775769916009f,0.549019607843137f,0.6f,0.395348837209302f,0.566037735849057f,0.0512820512820513f,0.0909090909090909f,0.130434782608696f,0.321428571428571f,0.0625f,0.0388746803069054f,0.608333333333333f,0.62962962962963f,0.285f,0.59349593495935f,0.311964631113567f,0f,0f,0f,0f,0.0195918367346939f,0.714285714285714f,0.803921568627451f,0.651898734177215f,0.671428571428571f,0.0575646087580761f,0.52f,0.28030303030303f,0.0962962962962963f,0.496f,0.108620689655172f};
    /*FG*/List<float> mapValues10 = new List<float> {0.250955414012739f,0.099009900990099f,0.284301606922126f,0.190921228304406f,0.0184042618548196f,0.117647058823529f,0.25f,0.0697674418604651f,0.188679245283019f,0.10989010989011f,0.454545454545455f,0.391304347826087f,0.607142857142857f,0.25f,0.0537084398976982f,0.141666666666667f,0.222222222222222f,0.05f,0.040650406504065f,0.29676706272451f,0.171052631578947f,0.171428571428571f,0.149700598802395f,0.173333333333333f,0.0563265306122449f,0.196428571428571f,0.117647058823529f,0.556962025316456f,0.285714285714286f,0.0497128499641062f,0.312f,0.106060606060606f,0.185185185185185f,0.44f,0.127586206896552f};
    /*FH*/List<float> mapValues11 = new List<float> {0.464968152866242f,0.227722772277228f,0.315203955500618f,0.339118825100133f,0.110330785230953f,0.235294117647059f,0.25f,0.162790697674419f,0.264150943396226f,0.0769230769230769f,0.181818181818182f,0.130434782608696f,0.428571428571429f,0.09375f,0.0248081841432225f,0.375f,0.296296296296296f,0.35f,0.333333333333333f,0.326471400939486f,0.131578947368421f,0.157142857142857f,0.137724550898204f,0.133333333333333f,0.0465306122448979f,0.392857142857143f,0.352941176470588f,0.620253164556962f,0.385714285714286f,0.0842605886575736f,0.496f,0.204545454545455f,0.0962962962962963f,0.44f,0f};
    /*FJK*/List<float> mapValues12 = new List<float> {0.573885350318471f,0.688118811881188f,0.126081582200247f,0.263017356475301f,0.339889175099393f,1f,0.45f,0.267441860465116f,1f,0.542124542124542f,0.136363636363636f,0f,0.214285714285714f,0.09375f,0.101662404092072f,0.366666666666667f,0.87037037037037f,0.025f,0.430894308943089f,0.338560375794418f,-1.0f,0.0857142857142857f,0.0898203592814371f,0f,0.0636734693877551f,0.464285714285714f,0.705882352941177f,0.287974683544304f,0.671428571428571f,0.146962491026561f,0.68f,0.333333333333333f,0.177777777777778f,0.648f,0.691379310344828f};
    /*FLMN*/List<float> mapValues13 = new List<float> {0f,-1.0f,0.0133910177173465f,0f,0.764195943514626f,0.627450980392157f,-1.0f,0.593023255813954f,0.641509433962264f,0.0677655677655677f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.525f,-1.0f,0.05f,0.51219512195122f,0.325366123238464f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.5f,-1.0f,0.525316455696203f,0.528571428571429f,0.0943557071069634f,0.0933333333333334f,-1.0f,0.0987654320987655f,0.253333333333333f,1f};
    /*HA*/List<float> mapValues14 = new List<float> {-1.0f,-1.0f,0.0488257107540173f,0.46328437917223f,0.775822574841365f,-1.0f,-1.0f,0.0697674418604651f,0.792452830188679f,1f,-1.0f,-1.0f,0.0357142857142857f,0.8125f,1f,-1.0f,-1.0f,0.135f,0.585365853658537f,0.498825642442664f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.10126582278481f,0.257142857142857f,0.244885139985642f,-1.0f,-1.0f,0.062962962962963f,0.336f,0.653448275862069f};
    /*HB*/List<float> mapValues15 = new List<float> {-1.0f,-1.0f,0f,0.375166889185581f,0.557880833062726f,-1.0f,-1.0f,0.0697674418604651f,0.943396226415094f,0.432234432234432f,-1.0f,-1.0f,0f,1f,0.59079283887468f,-1.0f,-1.0f,0.025f,0.414634146341463f,0.71331859629732f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.0506329113924051f,0.0857142857142857f,0.130473797559225f,-1.0f,-1.0f,0f,0.344f,0.610344827586207f};
    /*HC*/List<float> mapValues16 = new List<float> {-1.0f,-1.0f,0.0630407911001236f,0.190921228304406f,0.513186649230742f,-1.0f,-1.0f,0.116279069767442f,0.754716981132075f,0.615384615384615f,-1.0f,-1.0f,0.178571428571429f,0.375f,0.181585677749361f,-1.0f,-1.0f,0f,0.268292682926829f,0.702956617850235f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.240506329113924f,0.214285714285714f,0.296482412060302f,-1.0f,-1.0f,0.111111111111111f,0.248f,0.331034482758621f};
    /*IA*/List<float> mapValues17 = new List<float> {0.564331210191083f,0.54950495049505f,0.352286773794808f,0.599465954606141f,0.279136570681317f,0.274509803921569f,0.2f,0.209302325581395f,0.30188679245283f,0.175824175824176f,0f,0.304347826086957f,0.535714285714286f,0.0625f,0.0230179028132992f,0.391666666666667f,0.481481481481482f,0.375f,0.349593495934959f,0.45357833655706f,0.118421052631579f,0.257142857142857f,0.137724550898204f,0.133333333333333f,0.0710204081632653f,0.696428571428571f,0.803921568627451f,0.746835443037975f,0.714285714285714f,0.125762742282843f,0.584f,0.295454545454545f,0.0888888888888889f,0.76f,0.386551724137931f};
    /*IB*/List<float> mapValues18 = new List<float> {0.503184713375796f,0.53960396039604f,0.379480840543881f,0.507343124165554f,0.0906883825839689f,0.627450980392157f,0.8f,0.0697674418604651f,0.566037735849057f,0.148351648351648f,0.454545454545455f,0.782608695652174f,0.607142857142857f,0.375f,0.0644501278772379f,0.425f,0.425925925925926f,0.085f,0.430894308943089f,0.454269135120199f,0.328947368421053f,0.228571428571429f,0.281437125748503f,0.333333333333333f,0f,0.517857142857143f,0.607843137254902f,0.683544303797468f,0.5f,0.060480976310122f,0.224f,0.242424242424242f,0.222222222222222f,0.36f,0.186206896551724f};
    /*LA1*/List<float> mapValues19 = new List<float> {-1.0f,0.366336633663366f,0.111248454882571f,-1.0f,0.336252973029901f,-1.0f,0.45f,0.302325581395349f,-1.0f,0.120879120879121f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.259259259259259f,0.225f,-1.0f,0.22837800497375f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.901960784313726f,0.430379746835443f,-1.0f,0.194409547738693f,-1.0f,0.393939393939394f,0.222222222222222f,-1.0f,0.108620689655172f};
    /*LA2*/List<float> mapValues20 = new List<float> {0.495541401273885f,-1.0f,0.0877626699629172f,-1.0f,0.535698299997367f,0.431372549019608f,-1.0f,1f,-1.0f,0.175824175824176f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.458333333333333f,-1.0f,0.2f,-1.0f,0.376554296767063f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,1f,-1.0f,0.253164556962025f,-1.0f,0.220208183776023f,0.392f,-1.0f,0.111111111111111f,-1.0f,0.524137931034483f};
    /*LC1*/List<float> mapValues21 = new List<float> {0.453503184713376f,0.351485148514852f,0.464771322620519f,-1.0f,0.210372034649512f,0.313725490196078f,0.3f,0.116279069767442f,-1.0f,0.0769230769230769f,0.818181818181818f,0.695652173913044f,0.821428571428571f,-1.0f,0.0434782608695652f,0.325f,0.305555555555556f,0.2f,-1.0f,0.459450124343741f,0.355263157894737f,0.285714285714286f,0.269461077844311f,-1.0f,0.076530612244898f,0.428571428571428f,0.431372549019608f,1f,-1.0f,0.119705671213209f,0.24f,0.181818181818182f,0.185185185185185f,-1.0f,0.15f};
    /*LC2*/List<float> mapValues22 = new List<float> {0.549044585987261f,0.420792079207921f,0.358467243510507f,-1.0f,0.390623217279118f,0.352941176470588f,0.35f,0.0697674418604651f,-1.0f,0f,-1.0f,0.478260869565217f,0.392857142857143f,-1.0f,0.0728900255754476f,0.608333333333333f,0.185185185185185f,0.185f,-1.0f,0.685548494059132f,0.210526315789474f,0.285714285714286f,0.25748502994012f,-1.0f,0f,0.642857142857143f,0.490196078431373f,0.683544303797468f,-1.0f,0.170854271356784f,0.36f,0.393939393939394f,0.244444444444444f,-1.0f,0.410344827586207f};
    /*LC3*/List<float> mapValues23 = new List<float> {-1.0f,0.316831683168317f,0.0605686032138443f,-1.0f,-1.0f,-1.0f,0.45f,0.488372093023256f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.490740740740741f,0.18f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.607843137254902f,0.215189873417722f,-1.0f,-1.0f,-1.0f,0.242424242424242f,0.0814814814814815f,-1.0f,-1.0f};
    /*LD*/List<float> mapValues24 = new List<float> {-1.0f,0.306930693069307f,0.161310259579728f,-1.0f,0.334752196312126f,-1.0f,0.6f,0f,-1.0f,0.197802197802198f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.444444444444445f,0.405f,-1.0f,0.435617573915446f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.803921568627451f,0.632911392405063f,-1.0f,0.115891959798995f,-1.0f,0.166666666666667f,0.185185185185185f,-1.0f,0.346206896551724f};
    /*LE*/List<float> mapValues25 = new List<float> {-1.0f,0.287128712871287f,0.255871446229913f,-1.0f,0.165622559043716f,-1.0f,0.775f,0.116279069767442f,-1.0f,0.168498168498168f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,-1.0f,0.0833333333333333f,0.25f,-1.0f,0.126830616192318f,-1.0f,0.435714285714286f,0.353293413173653f,-1.0f,0.0269387755102041f,-1.0f,0.96078431372549f,0.462025316455696f,-1.0f,0.170854271356784f,-1.0f,0.238636363636364f,0.118518518518519f,-1.0f,0.139310344827586f};
    /*OA*/List<float> mapValues26 = new List<float> {0.361783439490446f,0.108910891089109f,0.510506798516687f,0.255006675567423f,0.0507016789391f,0.156862745098039f,0f,0.116279069767442f,0.113207547169811f,0.102564102564103f,0.727272727272727f,0.782608695652174f,0.464285714285714f,0.46875f,0.0383631713554987f,0.325f,0.194444444444445f,0.7f,0.268292682926829f,0.235424150317767f,0.210526315789474f,0.228571428571429f,0.329341317365269f,0.2f,0.0587755102040816f,0.267857142857143f,0.0196078431372549f,0.30379746835443f,0.285714285714286f,0.0147164393395549f,0.256f,0.121212121212121f,0.311111111111111f,0.288f,0.303448275862069f};
    /*OB*/List<float> mapValues27 = new List<float> {0.109554140127389f,0f,0.869592088998764f,0.0307076101468625f,0.388964464064735f,0f,0.1f,0f,0f,0.159340659340659f,0.454545454545455f,0.478260869565217f,0.964285714285714f,0.3125f,0.0271099744245524f,0.158333333333333f,0.148148148148148f,1f,0.146341463414634f,0.466841668969329f,0.157894736842105f,0.2f,0.544910179640719f,0.173333333333333f,0.0759183673469388f,0.0357142857142857f,0.137254901960784f,0.683544303797468f,0.1f,0.3862167982771f,0.104f,0f,0.62962962962963f,0.144f,0.191724137931034f};
    /*OC*/List<float> mapValues28 = new List<float> {0.315923566878981f,0.193069306930693f,1f,0.226969292389853f,0.625490385374887f,0.117647058823529f,0.2f,0.255813953488372f,0.150943396226415f,0.0293040293040293f,0.227272727272727f,0.347826086956522f,0.964285714285714f,0.125f,0.0138107416879795f,0f,0f,0.425f,0f,0f,1f,1f,1f,1f,1f,0.0535714285714286f,0f,0.367088607594937f,0.171428571428571f,0.628499641062455f,0.184f,0.053030303030303f,1f,0.16f,0.220689655172414f};
    /*PA*/List<float> mapValues29 = new List<float> {0.44968152866242f,0.207920792079208f,0.49938195302843f,0.218958611481976f,0.431133656892602f,0.431372549019608f,0.25f,0.255813953488372f,0.30188679245283f,0.021978021978022f,0.772727272727273f,0.565217391304348f,0.607142857142857f,0.375f,0.00255754475703325f,0.425f,0.296296296296296f,0.575f,0.308943089430894f,0.595192042000553f,0.328947368421053f,0.314285714285714f,0.329341317365269f,0.266666666666667f,0f,0.196428571428571f,0.0588235294117647f,0.240506329113924f,0f,0.233668341708543f,0.24f,0.128787878787879f,0.296296296296296f,0.28f,0.248275862068965f};
    /*PB*/List<float> mapValues30 = new List<float> {0.228025477707006f,0.175742574257426f,0.661928306551298f,0.192923898531375f,0.0230601802687356f,0.470588235294118f,0.35f,0.209302325581395f,0.415094339622642f,0.164835164835165f,0.772727272727273f,0.760869565217391f,1f,0.578125f,0.0127877237851662f,0.258333333333333f,0.180555555555556f,0.6875f,0.223577235772358f,0.0798563138988671f,0.355263157894737f,0.35f,0.389221556886228f,0.333333333333333f,0.0477551020408163f,0f,0.0686274509803921f,0.462025316455696f,0.0857142857142858f,0.0687814070351759f,0f,0.102272727272727f,0.388888888888889f,0.148f,0.255172413793103f};
    /*PC*/List<float> mapValues31 = new List<float> {0.621656050955414f,-1.0f,0.452410383189122f,0.667556742323097f,0.626350479634197f,0.274509803921569f,-1.0f,0.209302325581395f,0.264150943396226f,0.153846153846154f,0.681818181818182f,-1.0f,0.821428571428571f,0.46875f,0.0135549872122762f,0.491666666666667f,-1.0f,0.365f,0.51219512195122f,1f,0.394736842105263f,-1.0f,0.281437125748503f,0.4f,0.0587755102040816f,0.25f,-1.0f,0.177215189873418f,0.357142857142857f,0.3862167982771f,0.52f,-1.0f,0.296296296296296f,0.68f,0.222413793103448f};
    /*PD*/List<float> mapValues32 = new List<float> {-1.0f,0.316831683168317f,0.488875154511743f,0.170894526034713f,0.208897587347838f,-1.0f,0.15f,0.27906976744186f,0.226415094339623f,0.197802197802198f,-1.0f,0.608695652173913f,0.821428571428571f,0.375f,0.0230179028132992f,-1.0f,0.296296296296296f,0.505f,0.308943089430894f,0.592428847747997f,-1.0f,0.242857142857143f,0.293413173652695f,0.2f,0f,-1.0f,0.294117647058824f,0.177215189873418f,0.214285714285714f,0.060929648241206f,-1.0f,0.25f,0.259259259259259f,0.12f,0.158620689655172f};
    /*PE*/List<float> mapValues33 = new List<float> {0.507006369426752f,0.346534653465347f,0.437330037082818f,0.499332443257677f,0.345350983084547f,0.0784313725490196f,0.3f,0.106976744186047f,0.113207547169811f,0.139194139194139f,0.5f,0.91304347826087f,0.678571428571429f,0.375f,0.0345268542199489f,0.416666666666667f,0.333333333333333f,0.4f,0.349593495934959f,0.775490466979829f,0.315789473684211f,0.371428571428571f,0.317365269461078f,0.466666666666667f,0.075f,0.285714285714286f,0.215686274509804f,0.455696202531646f,0.357142857142857f,0.102476669059584f,0.456f,0.151515151515151f,0.0444444444444444f,0.52f,0.451724137931035f};
    /*PF*/List<float> mapValues34 = new List<float> {0.782165605095541f,0.54950495049505f,0.492583436341162f,0.755674232309746f,0.167110410411768f,0.392156862745098f,0.6f,0.232558139534884f,0.377358490566038f,0.761904761904762f,1f,1f,0.75f,0.75f,0.00255754475703325f,0.608333333333333f,0.407407407407407f,0.075f,0.59349593495935f,0.395551257253385f,0.447368421052632f,0.357142857142857f,0.461077844311377f,0.466666666666667f,0.0642857142857143f,0.410714285714286f,0.294117647058824f,0.746835443037975f,0.428571428571429f,0.0755114860014357f,0.56f,0.318181818181818f,0.148148148148148f,0.6f,0.322413793103448f};
    /*PG*/List<float> mapValues35 = new List<float> {0.663694267515924f,0.445544554455446f,0.49938195302843f,0.715620827770361f,0.118855771447902f,0.235294117647059f,0.1f,0.209302325581395f,0.264150943396226f,0.0879120879120879f,0.545454545454546f,0.478260869565217f,0.571428571428571f,0.375f,0.0421994884910486f,0.375f,0.444444444444445f,0.05f,0.430894308943089f,0.295385465598232f,0.381578947368421f,0.371428571428571f,0.688622754491018f,0.4f,0.214897959183673f,0.607142857142857f,0.294117647058824f,0.0253164556962025f,0.571428571428572f,0.0721464465183058f,0.6f,0.287878787878788f,0.133333333333333f,0.76f,0.360344827586207f};
    /*PH*/List<float> mapValues36 = new List<float> {0.453503184713376f,0.326732673267327f,0.330037082818294f,0.523364485981308f,0.21842005950448f,0.235294117647059f,0.2f,0.302325581395349f,0.188679245283019f,0.153846153846154f,0.818181818181818f,0.652173913043478f,0.678571428571429f,0.4375f,0.0342710997442455f,0.358333333333333f,0.259259259259259f,0.125f,0.51219512195122f,0.553191489361702f,0.236842105263158f,0.228571428571429f,0.209580838323353f,0.226666666666667f,0.0330612244897959f,0.642857142857143f,0.607843137254902f,0.30379746835443f,0.714285714285714f,0.0685570710696339f,0.2f,0.166666666666667f,0.2f,0.32f,0.255172413793103f};
    /*TA*/List<float> mapValues37 = new List<float> {0.495541401273885f,0.252475247524753f,0.286773794808405f,0.527369826435247f,0.246996252446441f,0.274509803921569f,0.35f,0.162790697674419f,0.264150943396226f,0.256410256410256f,0.454545454545455f,0.391304347826087f,0.5f,0.0625f,0.00767263427109974f,0.491666666666667f,0.342592592592593f,0.125f,0.552845528455285f,0.939209726443769f,0.171052631578947f,0.214285714285714f,0.209580838323353f,0.173333333333333f,0.0759183673469388f,0.446428571428571f,0.274509803921569f,0.30379746835443f,0.5f,0.117013639626705f,0.344f,0.143939393939394f,0.148148148148148f,0.52f,0.355862068965517f};
    /*TB*/List<float> mapValues38 = new List<float> {0.602547770700637f,0.52970297029703f,0.436341161928307f,0.539385847797063f,0.613080453919134f,0.313725490196078f,0.35f,0.0697674418604651f,0.30188679245283f,0.153846153846154f,0.545454545454546f,0.347826086956522f,0.464285714285714f,0.375f,0.0726342710997443f,0.508333333333333f,0.444444444444445f,0.515f,0.51219512195122f,0.555954683614258f,0.407894736842105f,0.585714285714286f,0.269461077844311f,0.4f,0.115102040816327f,0.285714285714286f,0.411764705882353f,0.430379746835443f,0.357142857142857f,0.431083991385499f,0.456f,0.242424242424242f,0.259259259259259f,0.44f,0.972413793103448f};
    /*TC*/List<float> mapValues39 = new List<float> {0.522292993630573f,0.544554455445545f,0.451174289245983f,0.551401869158879f,0.0346758410054326f,0.392156862745098f,0.25f,0.534883720930233f,0.415094339622642f,0.205128205128205f,0.909090909090909f,0.782608695652174f,0.75f,0.6875f,0.0202046035805627f,0.391666666666667f,0.351851851851852f,0.275f,0.349593495934959f,0.571981210279083f,0.513157894736842f,0.514285714285714f,0.329341317365269f,0.666666666666667f,0.0128571428571428f,0.517857142857143f,0.705882352941177f,0.30379746835443f,0.5f,0.00825556353194544f,0.152f,0.204545454545455f,0.222222222222222f,0.28f,0.180689655172414f};
    /*TD*/List<float> mapValues40 = new List<float> {0.461146496815287f,0.460396039603961f,0.412855377008653f,0.51935914552737f,0f,0.235294117647059f,0.15f,0.0232558139534884f,0.188679245283019f,0.256410256410256f,0.636363636363636f,0.695652173913044f,0.75f,0.46875f,0f,0.441666666666667f,0.398148148148148f,0.1f,0.430894308943089f,0.0634153080961592f,0.315789473684211f,0.371428571428571f,0.305389221556886f,0.4f,0.0342857142857143f,0.464285714285714f,0.509803921568627f,0.556962025316456f,0.5f,0f,0.2f,0.21969696969697f,0.259259259259259f,0.4f,0.489655172413793f};
    /*TE*/List<float> mapValues41 = new List<float> {0.770700636942675f,0.737623762376238f,0.370828182941904f,0.823765020026702f,0.483820573805742f,0.313725490196078f,0.3f,0.302325581395349f,0.377358490566038f,0.256410256410256f,0.409090909090909f,0.565217391304348f,0.5f,0.21875f,0.0547314578005115f,0.491666666666667f,0.583333333333333f,0.375f,0.390243902439024f,0.694667035092567f,0.236842105263158f,0.257142857142857f,0.18562874251497f,0.253333333333333f,0.0269387755102041f,0.803571428571428f,0.607843137254902f,0.430379746835443f,0.928571428571429f,0.170854271356784f,0.72f,0.515151515151515f,0.259259259259259f,0.92f,0.955172413793103f};
    /*TF*/List<float> mapValues42 = new List<float> {0.537579617834395f,0.445544554455446f,0.365883807169345f,0.54739652870494f,0.260641472340948f,0.392156862745098f,0.3f,0.209302325581395f,0.377358490566038f,0.43956043956044f,0.545454545454546f,0.565217391304348f,0.607142857142857f,0.375f,0.0997442455242967f,0.641666666666667f,0.296296296296296f,0.15f,0.59349593495935f,0.213871235147831f,0.184210526315789f,0.228571428571429f,0.209580838323353f,0.2f,0.0269387755102041f,0.464285714285714f,0.725490196078431f,0.873417721518987f,0.5f,0.114949748743719f,0.232f,0.272727272727273f,0.133333333333333f,0.4f,0.697931034482759f};
    /*TG*/List<float> mapValues43 = new List<float> {0.862420382165605f,1f,0.179233621755253f,1f,0.309791909848079f,0.509803921568627f,0.8f,0.209302325581395f,0.566037735849057f,0.358974358974359f,0.0454545454545454f,0.217391304347826f,0.321428571428571f,0f,0.0728900255754476f,0.683333333333333f,0.5f,0.05f,0.75609756097561f,0.379662890301188f,0.144736842105263f,0.0571428571428571f,0.0898203592814371f,0.133333333333333f,0.13469387755102f,0.821428571428571f,0.803921568627451f,0.240506329113924f,0.928571428571429f,0.130473797559225f,0.8f,1f,0.2f,1f,0.903448275862069f};
    
    // Min and Max values (un normalised) for the cytologic legend
    List<float> mapMaxValues = new List<float>{4.15000000000000f,3.60000000000000f,894000f,4.03000000000000f,439.910237965171f,0.415000000000000f,0.380000000000000f,25000f,0.415000000000000f,123.700210735098f,0.300000000000000f,0.300000000000000f,155000f,0.400000000000000f,785.398163397448f,1.47000000000000f,1.40000000000000f,215000f,1.50000000000000f,513.781298555831f,0.820000000000000f,0.740000000000000f,430000f,0.800000000000000f,340.339204138894f,0.800000000000000f,0.700000000000000f,95000f,0.850000000000000f,2226.60379323177f,1.70000000000000f,1.60000000000000f,160000f,1.50000000000000f,341.648201077890f};
    List<float> mapMinValues = new List<float>{1.53333333333333f,1.58000000000000f,85000f,1.53333333333333f,84.7949517125174f,0.160000000000000f,0.180000000000000f,3500f,0.150000000000000f,16.4933614313464f,0.0800000000000000f,0.0700000000000000f,15000f,0.0800000000000000f,17.6714586764426f,0.270000000000000f,0.320000000000000f,15000f,0.270000000000000f,40.0553063332699f,0.0600000000000000f,0.0400000000000000f,12500f,0.0500000000000000f,19.6349540849362f,0.240000000000000f,0.190000000000000f,16000f,0.150000000000000f,38.4845100064750f,0.450000000000000f,0.280000000000000f,25000f,0.250000000000000f,56.9413668463150f};
    /*All*/List<List<float>> allMapValues = new List<List<float>>{};

    private int currentMapping = 0;

    //used to generate cleaner csv files that can be updated and replaced easily
    //void Temporary() {

    //    for (int i = 0; i< 35; i++) {
    //        string path = "Assets/Resources/Color-maps/von_economo/" + i.ToString() + ".csv";

    //        //Write some text to the test.txt file
    //        StreamWriter writer = new StreamWriter(path, true);


    //        foreach (List<float> values in allMapValues)
    //        {
    //            float num = values[i];
    //            if (num == -1f)
    //            {
    //                Debug.Log("NA");
    //                writer.WriteLine("NA");
    //            }
    //            else
    //            {
    //                Debug.Log(num);
    //                writer.WriteLine(num.ToString());

    //            }
    //        }
    //        writer.Close();

    //    }

    //}
    
    // Start is called before the first frame update
    void Start()
    {
        colormapDropdown = colormapUI.GetComponent<Dropdown>();
        colormapDropdown.onValueChanged.AddListener(delegate {
            selectColorTable(colormapDropdown);
        });

        // make sure region UI and Model shows on start, and cytologic is hidden
        regionModel.SetActive(true);
        cytologicModel.SetActive(false);
        regionUI.SetActive(true);
        cytologicUI.SetActive(false);
        colormapUI.SetActive(false);
        colorMapLegendUI.SetActive(false);

        //set region mappings
        setRegionMappings();
        //Temporary();

        // Set Viridis Gradient
        viridis = new Gradient();
        // Populate the color keys at the relative time 0 and 1 (0 and 100%)
        colorKey = new GradientColorKey[8];
        colorKey[0].color = new Color32(243, 233, 28, 1);
        colorKey[0].time = 1.0f;
        colorKey[1].color = new Color32(147, 219 ,53, 1);
        colorKey[1].time = 0.86f;
        colorKey[2].color = new Color32(61, 195 ,108, 1);
        colorKey[2].time = 0.71f;
        colorKey[3].color = new Color32(34, 162, 135, 1);
        colorKey[3].time = 0.57f;
        colorKey[4].color = new Color32(52, 127, 142, 1);
        colorKey[4].time = 0.43f;
        colorKey[5].color = new Color32(67, 91, 141, 1);
        colorKey[5].time = 0.29f;
        colorKey[6].color = new Color32(79, 48, 127, 1);
        colorKey[6].time = 0.14f;
        colorKey[7].color = new Color32(72, 0, 84, 1);
        colorKey[7].time = 0.0f;

        // Populate the alpha  keys at relative time 0 and 1  (0 and 100%)
        alphaKey = new GradientAlphaKey[2];
        alphaKey[0].alpha = 1.0f;
        alphaKey[0].time = 0.0f;
        alphaKey[1].alpha = 1.0f;
        alphaKey[1].time = 1.0f;

        viridis.SetKeys(colorKey, alphaKey);

        // Set Plasma Gradient
        plasma = new Gradient();
        // Populate the color keys at the relative time 0 and 1 (0 and 100%)
        colorKey = new GradientColorKey[8];
        colorKey[0].color = new Color32(228, 250, 21, 1);
        colorKey[0].time = 1.0f;
        colorKey[1].color = new Color32(246, 189, 39, 1);
        colorKey[1].time = 0.86f;
        colorKey[2].color = new Color32(238, 137, 73, 1);
        colorKey[2].time = 0.71f;
        colorKey[3].color = new Color32(216, 91, 105, 1);
        colorKey[3].time = 0.57f;
        colorKey[4].color = new Color32(186, 47, 138, 1);
        colorKey[4].time = 0.43f;
        colorKey[5].color = new Color32(146, 0, 166, 1);
        colorKey[5].time = 0.29f;
        colorKey[6].color = new Color32(98, 0, 164, 1);
        colorKey[6].time = 0.14f;
        colorKey[7].color = new Color32(47, 0, 135, 1);
        colorKey[7].time = 0.0f;

        // Populate the alpha  keys at relative time 0 and 1  (0 and 100%)
        alphaKey = new GradientAlphaKey[2];
        alphaKey[0].alpha = 1.0f;
        alphaKey[0].time = 0.0f;
        alphaKey[1].alpha = 1.0f;
        alphaKey[1].time = 1.0f;

        plasma.SetKeys(colorKey, alphaKey);

        // Set Inferno Gradient
        inferno = new Gradient();
        // Populate the color keys at the relative time 0 and 1 (0 and 100%)
        colorKey = new GradientColorKey[8];
        colorKey[0].color = new Color32(245, 255, 163, 1);
        colorKey[0].time = 1.0f;
        colorKey[1].color = new Color32(242, 194, 35, 1);
        colorKey[1].time = 0.86f;
        colorKey[2].color = new Color32(239, 125, 21, 1);
        colorKey[2].time = 0.71f;
        colorKey[3].color = new Color32(208, 72, 67, 1);
        colorKey[3].time = 0.57f;
        colorKey[4].color = new Color32(158, 40, 100, 1);
        colorKey[4].time = 0.43f;
        colorKey[5].color = new Color32(105, 15, 111, 1);
        colorKey[5].time = 0.29f;
        colorKey[6].color = new Color32(48, 7, 84, 1);
        colorKey[6].time = 0.14f;
        colorKey[7].color = new Color32(1, 0, 4, 1);
        colorKey[7].time = 0.0f;

        // Populate the alpha  keys at relative time 0 and 1  (0 and 100%)
        alphaKey = new GradientAlphaKey[2];
        alphaKey[0].alpha = 1.0f;
        alphaKey[0].time = 0.0f;
        alphaKey[1].alpha = 1.0f;
        alphaKey[1].time = 1.0f;

        inferno.SetKeys(colorKey, alphaKey);

        // Set Magma Gradient
        magma = new Gradient();
        // Populate the color keys at the relative time 0 and 1 (0 and 100%)
        colorKey = new GradientColorKey[8];
        colorKey[0].color = new Color32(255, 222, 152, 1);
        colorKey[0].time = 1.0f;
        colorKey[1].color = new Color32(255, 151, 98, 1);
        colorKey[1].time = 0.86f;
        colorKey[2].color = new Color32(251, 76, 92, 1);
        colorKey[2].time = 0.71f;
        colorKey[3].color = new Color32(197, 34, 122, 1);
        colorKey[3].time = 0.57f;
        colorKey[4].color = new Color32(137, 15, 133, 1);
        colorKey[4].time = 0.43f;
        colorKey[5].color = new Color32(84, 0, 125, 1);
        colorKey[5].time = 0.29f;
        colorKey[6].color = new Color32(39, 10, 83, 1);
        colorKey[6].time = 0.14f;
        colorKey[7].color = new Color32(9, 5, 28, 1);
        colorKey[7].time = 0.0f;

        // Populate the alpha  keys at relative time 0 and 1  (0 and 100%)
        alphaKey = new GradientAlphaKey[2];
        alphaKey[0].alpha = 1.0f;
        alphaKey[0].time = 0.0f;
        alphaKey[1].alpha = 1.0f;
        alphaKey[1].time = 1.0f;

        magma.SetKeys(colorKey, alphaKey);

        // Set Cividis Gradient
        cividis = new Gradient();
        // Populate the color keys at the relative time 0 and 1 (0 and 100%)
        colorKey = new GradientColorKey[8];
        colorKey[0].color = new Color32(251, 223, 0, 1);
        colorKey[0].time = 1.0f;
        colorKey[1].color = new Color32(226, 203, 55, 1);
        colorKey[1].time = 0.86f;
        colorKey[2].color = new Color32(184, 177, 93, 1);
        colorKey[2].time = 0.71f;
        colorKey[3].color = new Color32(157, 148, 113, 1);
        colorKey[3].time = 0.57f;
        colorKey[4].color = new Color32(118, 118, 118, 1);
        colorKey[4].time = 0.43f;
        colorKey[5].color = new Color32(82, 90, 111, 1);
        colorKey[5].time = 0.29f;
        colorKey[6].color = new Color32(43, 65, 111, 1);
        colorKey[6].time = 0.14f;
        colorKey[7].color = new Color32(0, 44, 104, 1);
        colorKey[7].time = 0.0f;

        // Populate the alpha  keys at relative time 0 and 1  (0 and 100%)
        alphaKey = new GradientAlphaKey[2];
        alphaKey[0].alpha = 1.0f;
        alphaKey[0].time = 0.0f;
        alphaKey[1].alpha = 1.0f;
        alphaKey[1].time = 1.0f;

        cividis.SetKeys(colorKey, alphaKey);

        //randomlyMapBrainColors();

        // start cytologic atlas on first mapping and current color map selection:
        selectMapping(0);
        //setColorMapLegendUI();

       



    }

    // Update is called once per frame
    void Update()
    {

        
    }

    public void getColorTableRegionRenderers(){
        //find regions in color table model
        //make a list or dict of renderers per region so the color table can be applied to the color table model
    }

    public void switchMenus(string menu){
        // switch from region menu to color table menu
        
        if(menu == "regionUI"){
            if(regionUI.activeInHierarchy){
            //already active, do nothing
            }else{
                atlasManager.closePopUp();
                cytologicUI.SetActive(false);
                colormapUI.SetActive(false);
                regionUI.SetActive(true);
                colorMapLegendUI.SetActive(false);
                switchModels();
            }

        }else if(menu == "cytologicUI"){
            if(cytologicUI.activeInHierarchy){
                //already active, do nothing
            }else{
                atlasManager.closePopUp();
                cytologicUI.SetActive(true);
                colormapUI.SetActive(true);
                regionUI.SetActive(false);
                colorMapLegendUI.SetActive(true);
                switchModels();
            }

        }

    }

    public void selectColorTable(Dropdown change){
        // pick color table 
        // set regions to color
        //Debug.Log("Color Map Int: " + change.value.ToString());
        currentColorMap = (ColorMap)change.value;
       // randomlyMapBrainColors();
       selectMapping(currentMapping);
       //setColorMapLegendUI();
    }

    public void selectMapping(int mapping){
        // set region colors to based on current color table to renders for each region
        currentMapping = mapping;
        int regionCount = 0;

        foreach(GameObject region in brainRegions){
            Renderer[] renderers = region.GetComponentsInChildren<Renderer>();
            
            if(regionCount == 0){
                // his is the corpus callosum
                // this is a region that is not part of the Von Economo Atlas, but included to fill out the brain model
                foreach(Renderer render in renderers){
                render.material.color = missingDataColor;
                }
            }
            else if(allMapValues[regionCount -1][mapping] == -1.0f){
                // -1 means no data for this region, so use a special color for that
                foreach(Renderer render in renderers){
                render.material.color = missingDataColor;
                }
            }  
            else{
                foreach(Renderer render in renderers){

                    // otherwise use the current gradient map to color each region
                    if (currentColorMap == ColorMap.magma){
                    render.material.color = magma.Evaluate(allMapValues[regionCount-1][mapping]);
                    }
                    if (currentColorMap == ColorMap.cividis){
                    render.material.color = cividis.Evaluate(allMapValues[regionCount-1][mapping]);
                    }
                    if (currentColorMap == ColorMap.inferno){
                    render.material.color = inferno.Evaluate(allMapValues[regionCount-1][mapping]);
                    }
                    if (currentColorMap == ColorMap.plasma){
                    render.material.color = plasma.Evaluate(allMapValues[regionCount-1][mapping]);
                    }
                    if (currentColorMap == ColorMap.viridis){
                    render.material.color = viridis.Evaluate(allMapValues[regionCount-1][mapping]);
                    }
                }
            }
            
           regionCount +=1;
           //Debug.Log("region count: " + regionCount.ToString()); 
        }
        //Debug.Log("number of regions game objects: " + brainRegions.Length.ToString());
        //Debug.Log("number of mappings " + allMapValues.Count.ToString());
        setColorMapLegendUI();
    }

    public void setColorMapLegendUI(){
        ColorPalette cmap = colorMapLegendUI.GetComponent<ColorPalette>();
        cmap.min = mapMinValues[currentMapping];
        cmap.max = mapMaxValues[currentMapping];
        cmap.UpdatePalette();
        if (currentColorMap == ColorMap.magma){
            cmap.colorGradient = magma;
        }
        if (currentColorMap == ColorMap.cividis){
            cmap.colorGradient = cividis;
        }
        if (currentColorMap == ColorMap.inferno){
            cmap.colorGradient = inferno;
        }
        if (currentColorMap == ColorMap.plasma){
            cmap.colorGradient = plasma;
        }
        if (currentColorMap == ColorMap.viridis){
            cmap.colorGradient = viridis;
        }
    }

    public void switchModels(){
        // switch between atlas and color table models
        if(regionModel.activeInHierarchy){
            regionModel.SetActive(false);
            cytologicModel.SetActive(true);
        }else{
            regionModel.SetActive(true);
            cytologicModel.SetActive(false);
        }
    }

    public void setRegionMappings()
    {
        allMapValues.Add(mapValues1);
        allMapValues.Add(mapValues2);
        allMapValues.Add(mapValues3);
        allMapValues.Add(mapValues4);
        allMapValues.Add(mapValues5);
        allMapValues.Add(mapValues6);
        allMapValues.Add(mapValues7);
        allMapValues.Add(mapValues8);
        allMapValues.Add(mapValues9);
        allMapValues.Add(mapValues10);
        allMapValues.Add(mapValues11);
        allMapValues.Add(mapValues12);
        allMapValues.Add(mapValues13);
        allMapValues.Add(mapValues14);
        allMapValues.Add(mapValues15);
        allMapValues.Add(mapValues16);
        allMapValues.Add(mapValues17);
        allMapValues.Add(mapValues18);
        allMapValues.Add(mapValues19);
        allMapValues.Add(mapValues20);
        allMapValues.Add(mapValues21);
        allMapValues.Add(mapValues22);
        allMapValues.Add(mapValues23);
        allMapValues.Add(mapValues24);
        allMapValues.Add(mapValues25);
        allMapValues.Add(mapValues26);
        allMapValues.Add(mapValues27);
        allMapValues.Add(mapValues28);
        allMapValues.Add(mapValues29);
        allMapValues.Add(mapValues30);
        allMapValues.Add(mapValues31);
        allMapValues.Add(mapValues32);
        allMapValues.Add(mapValues33);
        allMapValues.Add(mapValues34);
        allMapValues.Add(mapValues35);
        allMapValues.Add(mapValues36);
        allMapValues.Add(mapValues37);
        allMapValues.Add(mapValues38);
        allMapValues.Add(mapValues39);
        allMapValues.Add(mapValues40);
        allMapValues.Add(mapValues41);
        allMapValues.Add(mapValues42);
        allMapValues.Add(mapValues43);
 
    }

    public void randomlyMapBrainColors(){
        if(currentColorMap == ColorMap.viridis){
            //testCubeRenderer.material.color = viridis.Evaluate(UnityEngine.Random.Range(0f,1f));

            foreach(GameObject region in brainRegions){
                Renderer[] renderers = region.GetComponentsInChildren<Renderer>();
                foreach(Renderer render in renderers){
                    render.material.color = viridis.Evaluate(UnityEngine.Random.Range(0f,1f));
                }

            }
        }

        if(currentColorMap == ColorMap.plasma){
            //testCubeRenderer.material.color = viridis.Evaluate(UnityEngine.Random.Range(0f,1f));

            foreach(GameObject region in brainRegions){
                Renderer[] renderers = region.GetComponentsInChildren<Renderer>();
                foreach(Renderer render in renderers){
                    render.material.color = plasma.Evaluate(UnityEngine.Random.Range(0f,1f));
                }

            }
        }

        if(currentColorMap == ColorMap.inferno){
            //testCubeRenderer.material.color = viridis.Evaluate(UnityEngine.Random.Range(0f,1f));

            foreach(GameObject region in brainRegions){
                Renderer[] renderers = region.GetComponentsInChildren<Renderer>();
                foreach(Renderer render in renderers){
                    render.material.color = inferno.Evaluate(UnityEngine.Random.Range(0f,1f));
                }

            }
        }

        if(currentColorMap == ColorMap.magma){
            //testCubeRenderer.material.color = viridis.Evaluate(UnityEngine.Random.Range(0f,1f));

            foreach(GameObject region in brainRegions){
                Renderer[] renderers = region.GetComponentsInChildren<Renderer>();
                foreach(Renderer render in renderers){
                    render.material.color = magma.Evaluate(UnityEngine.Random.Range(0f,1f));
                }

            }
        }

        if(currentColorMap == ColorMap.cividis){
            //testCubeRenderer.material.color = viridis.Evaluate(UnityEngine.Random.Range(0f,1f));

            foreach(GameObject region in brainRegions){
                Renderer[] renderers = region.GetComponentsInChildren<Renderer>();
                foreach(Renderer render in renderers){
                    render.material.color = cividis.Evaluate(UnityEngine.Random.Range(0f,1f));
                }

            }
        }
    }

}
